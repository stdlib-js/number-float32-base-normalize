{"version":3,"file":"index.mjs","sources":["../lib/assign.js","../lib/main.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport FLOAT32_SMALLEST_NORMAL from '@stdlib/constants-float32-smallest-normal' ;\nimport PINF from '@stdlib/constants-float32-pinf' ;\nimport NINF from '@stdlib/constants-float32-ninf' ;\nimport abs from '@stdlib/math-base-special-abs' ;\nimport toFloat32 from '@stdlib/number-float64-base-to-float32' ;\n\n\n// VARIABLES //\n\n// (1<<32)\nvar SCALAR = 8388608;\n\n\n// MAIN //\n\n/**\n* Returns a normal number `y` and exponent `exp` satisfying \\\\(x = y \\cdot 2^\\mathrm{exp}\\\\) and assigns results to a provided output array.\n*\n* @private\n* @param {number} x - single-precision floating-point number\n* @param {Collection} out - output array\n* @param {integer} stride - output array stride\n* @param {NonNegativeInteger} offset - output array index offset\n* @returns {Collection} output array\n*\n* @example\n* import toFloat32 from '@stdlib/number-float64-base-to-float32' ;\n*\n* var v = normalizef( toFloat32( 1.401e-45 ), [ 0.0, 0.0 ], 1, 0 );\n* // returns [ 1.1754943508222875e-38, -23 ]\n*\n* @example\n* var v = normalizef( 0.0, [ 0.0, 0.0 ], 1, 0 );\n* // returns [ 0.0, 0 ];\n*\n* @example\n* import PINF from '@stdlib/constants-float32-pinf' ;\n*\n* var v = normalizef( PINF, [ 0.0, 0.0 ], 1, 0 );\n* // returns [ +Infinity, 0 ]\n*\n* @example\n* import NINF from '@stdlib/constants-float32-ninf' ;\n*\n* var v = normalizef( NINF, [ 0.0, 0.0 ], 1, 0 );\n* // returns [ -Infinity, 0 ]\n*\n* @example\n* var v = normalizef( NaN, [ 0.0, 0.0 ], 1, 0 );\n* // returns [ NaN, 0 ]\n*/\nfunction normalizef( x, out, stride, offset ) {\n\tif (\n\t\tx !== x ||\n\t\tx === PINF ||\n\t\tx === NINF\n\t) {\n\t\tout[ offset ] = x;\n\t\tout[ offset + stride ] = 0;\n\t\treturn out;\n\t}\n\tif ( x !== 0.0 && abs( x ) < FLOAT32_SMALLEST_NORMAL ) {\n\t\tx = toFloat32( x*SCALAR );\n\t\tout[ offset ] = x;\n\t\tout[ offset + stride ] = -23;\n\t\treturn out;\n\t}\n\tout[ offset ] = x;\n\tout[ offset + stride ] = 0;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default normalizef;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport normalize from './assign.js' ;\n\n\n// MAIN //\n\n/**\n* Returns a normal number `y` and exponent `exp` satisfying \\\\(x = y \\cdot 2^\\mathrm{exp}\\\\).\n*\n* @param {number} x - single-precision floating-point number\n* @returns {Array<number>} output array\n*\n* @example\n* import toFloat32 from '@stdlib/number-float64-base-to-float32' ;\n*\n* var v = normalizef( toFloat32( 1.401e-45 ) );\n* // returns [ 1.1754943508222875e-38, -23 ]\n*\n* @example\n* var v = normalizef( 0.0 );\n* // returns [ 0.0, 0 ]\n*\n* @example\n* import PINF from '@stdlib/constants-float32-pinf' ;\n*\n* var v = normalizef( PINF );\n* // returns [ +Infinity, 0 ]\n*\n* @example\n* import NINF from '@stdlib/constants-float32-ninf' ;\n*\n* var v = normalizef( NINF );\n* // returns [ -Infinity, 0 ]\n*\n* @example\n* var v = normalizef( NaN );\n* // returns [ NaN, 0 ]\n*/\nfunction normalizef( x ) {\n\treturn normalize( x, [ 0.0, 0.0 ], 1, 0 );\n}\n\n\n// EXPORTS //\n\nexport default normalizef;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return a normal number `y` and exponent `exp` satisfying \\\\(x = y \\cdot 2^\\mathrm{exp}\\\\).\n*\n* @module @stdlib/number-float32-base-normalize\n*\n* @example\n* import pow from '@stdlib/math-base-special-pow' ;\n* import toFloat32 from '@stdlib/number-float64-base-to-float32' ;\n* import normalizef from '@stdlib/number-float32-base-normalize' ;\n*\n* var out = normalizef( toFloat32( 1.401e-45 ) );\n* // returns [ 1.1754943508222875e-38, -23 ]\n*\n* var y = out[ 0 ];\n* var exp = out[ 1 ];\n*\n* var bool = ( y*pow(2,exp) === toFloat32(1.401e-45) );\n* // returns true\n*\n* @example\n* import Float32Array from '@stdlib/array-float32' ;\n* import toFloat32 from '@stdlib/number-float64-base-to-float32' ;\n* import normalizef from '@stdlib/number-float32-base-normalize' ;\n*\n* var out = new Float32Array( 2 );\n*\n* var v = normalizef.assign( toFloat32( 1.401e-45 ), out, 1, 0 );\n* // returns <Float32Array>[ 1.1754943508222875e-38, -23.0 ]\n*\n* var bool = ( v === out );\n* // returns true\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport main from './main.js' ;\nimport assign from './assign.js' ;\n\n\n// MAIN //\n\nsetReadOnly( main, 'assign', assign );\n\n\n// EXPORTS //\n\nexport default main;\n"],"names":["normalizef","x","out","stride","offset","PINF","NINF","abs","FLOAT32_SMALLEST_NORMAL","toFloat32","normalize","setReadOnly","main","assign"],"mappings":";;imBAyEA,SAASA,EAAYC,EAAGC,EAAKC,EAAQC,GACpC,OACCH,GAAMA,GACNA,IAAMI,GACNJ,IAAMK,GAENJ,EAAKE,GAAWH,EAChBC,EAAKE,EAASD,GAAW,EAClBD,GAEG,IAAND,GAAaM,EAAKN,GAAMO,GAC5BP,EAAIQ,EApDO,QAoDIR,GACfC,EAAKE,GAAWH,EAChBC,EAAKE,EAASD,IAAY,GACnBD,IAERA,EAAKE,GAAWH,EAChBC,EAAKE,EAASD,GAAW,EAClBD,EACR,CCjCA,SAASF,EAAYC,GACpB,OAAOS,EAAWT,EAAG,CAAE,EAAK,GAAO,EAAG,EACvC,CCCAU,EAAAC,EAAA,SAAAC"}